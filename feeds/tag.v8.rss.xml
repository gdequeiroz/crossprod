<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Crossprod</title><link>http://nacnudus.github.io/crossprod/</link><description>R, data, and frustration</description><atom:link href="http://nacnudus.github.io/crossprod/feeds/tag.v8.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 28 Jun 2016 00:00:00 +1200</lastBuildDate><item><title>Hacking the Data Science Radar with DataÂ Science</title><link>http://nacnudus.github.io/crossprod/hacking-the-data-science-radar-with-data-science</link><description>&lt;p&gt;This post reverse-engineers the Mango Solutions &lt;a href="https://www.mango-solutions.com/radar/"&gt;Data Science
Radar&lt;/a&gt;&amp;nbsp;using&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Programming&amp;nbsp;(R)&lt;/li&gt;
&lt;li&gt;Visualisation&amp;nbsp;(ggplot2) &lt;/li&gt;
&lt;li&gt;Data wrangling&amp;nbsp;(dpylr/tidyr/etc.)&lt;/li&gt;
&lt;li&gt;Modelling&amp;nbsp;(lm)&lt;/li&gt;
&lt;li&gt;Technology (embedded V8&amp;nbsp;javascript)&lt;/li&gt;
&lt;li&gt;Communication&amp;nbsp;(blog)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why hack?  Because getting at the innards also&amp;nbsp;reveals&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What a good score is in each&amp;nbsp;category&lt;/li&gt;
&lt;li&gt;Which statements are most&amp;nbsp;important&lt;/li&gt;
&lt;li&gt;Whether scores are comparable across&amp;nbsp;people&lt;/li&gt;
&lt;li&gt;Whether you should strongly agree with the statement &amp;#8220;On average, I spend at
  least 25% of my time manipulating data into analysis-ready&amp;nbsp;formats&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-radar"&gt;The&amp;nbsp;radar&lt;/h2&gt;
&lt;p&gt;Based on Likert-style responses to 24 provocative statements, the Data
Science Radar visualises your skills along six axes, the &amp;#8220;core attributes of a
contemporary &amp;#8216;Data Scientist&amp;#8217;.&amp;#8221; It looks like&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Mango Solutions Data Science Radar" src="figure/radar.png" /&gt;&lt;/p&gt;
&lt;h2 id="first-attempt-multivariate-multiple-regression"&gt;First attempt: Multivariate multiple&amp;nbsp;regression&lt;/h2&gt;
&lt;p&gt;How can we score better?  Hacking the url would be
&lt;a href="https://www.mango-solutions.com/radar/?fs=true&amp;amp;r=7.0,7.0,7.0,7.0,7.0,7.0"&gt;cheating&lt;/a&gt;,
so instead, let&amp;#8217;s use science: hypothesise -&amp;gt; test -&amp;gt; improve.  Here are some
initial&amp;nbsp;guesses.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each of the 24 statements relates to exactly one attribute, i.e. four
  statements per&amp;nbsp;attribute.&lt;/li&gt;
&lt;li&gt;The Likert values (strongly agree, agree, somewhat agree, etc.) are coded from
  1 to 7 (since there are seven points on each&amp;nbsp;axis).&lt;/li&gt;
&lt;li&gt;There is a linear relationship between the coded agreement with the
  statements, and the&amp;nbsp;attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So something&amp;nbsp;like
&lt;/p&gt;
&lt;div class="math"&gt;$$\text{score}_{\text{attribute}} = \frac{1}{4} \sum_{i = 1}^{4} \text{answer}_i$$&lt;/div&gt;
&lt;p&gt;
where &lt;span class="math"&gt;\(\text{answer}_i = 1, 2, \cdots, 7\)&lt;/span&gt; by encoding &amp;#8220;Strongly disagree&amp;#8221; as
1, up to &amp;#8220;Strongly agree&amp;#8221; as 7, including only four relevant answers per
attribute.  The best-possible set of answers would score 7 on every axis, and
the worst set would score&amp;nbsp;1.&lt;/p&gt;
&lt;p&gt;If the hypotheses are correct, then all we need to do to prove them is to record
24 sets of random answers, the resulting scores, and fit a multivariate
linear model.  We&amp;#8217;d expect each score (outcome variable) to have four non-zero
coefficients (out of the 24 input variables).  Let&amp;#8217;s try&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# The first two aren&amp;#39;t random, but they&amp;#39;re still linearly independent of the&lt;/span&gt;
&lt;span class="c1"&gt;# others, which is what matters.&lt;/span&gt;
random_data &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; read_csv&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;./data/radar-random.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
lm1 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; lm&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;cbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;Communicator&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sb"&gt;`Data Wrangler`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; Modeller&lt;span class="p"&gt;,&lt;/span&gt; 
                Programmer&lt;span class="p"&gt;,&lt;/span&gt; Technologist&lt;span class="p"&gt;,&lt;/span&gt; Visualiser&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="m"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; data &lt;span class="o"&gt;=&lt;/span&gt; random_data&lt;span class="p"&gt;)&lt;/span&gt;
lm1
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## 
## Call:
## lm(formula = cbind(Communicator, `Data Wrangler`, Modeller, Programmer, 
##     Technologist, Visualiser) ~ ., data = random_data)
## 
## Coefficients:
##              Communicator  Data Wrangler  Modeller    Programmer  Technologist  Visualiser
## (Intercept)   2.060e+00     2.422e+00      3.247e+00   6.658e-01  -1.331e+00     1.456e+00
## q01           1.997e-01    -2.507e-02      2.602e-01  -1.103e-01  -5.866e-02    -7.103e-02
## q02          -2.571e-01     2.729e-02     -4.514e-01   2.090e-01   1.554e-01     1.281e-01
## q03           3.087e-01     1.744e-02     -3.471e-01  -1.303e-03   5.611e-02     1.978e-01
## q04           4.356e-01     8.534e-04     -8.676e-03  -2.346e-02  -7.130e-02    -4.193e-02
## q05          -2.524e-01     2.267e-01      8.732e-01  -1.559e-01  -1.907e-01    -3.885e-01
## q06          -1.948e-01     1.545e-01      7.016e-01  -7.626e-02  -1.271e-01    -3.897e-01
## q07          -7.925e-03     2.075e-01      4.423e-01  -1.089e-01  -2.015e-01    -2.247e-01
## q08           8.902e-02    -4.810e-01     -1.246e-02   8.111e-02  -5.556e-02    -4.572e-02
## q09           1.901e-01     5.174e-02     -5.260e-01  -9.428e-02   5.506e-02     2.620e-01
## q10           9.750e-02    -1.248e-02     -2.365e-01   3.181e-02   1.557e-01     3.267e-01
## q11          -2.099e-01    -5.220e-02      2.943e-01   2.032e-01   6.801e-02    -1.775e-01
## q12          -1.000e-01     1.813e-15      7.000e-01  -1.333e-01   9.653e-16    -1.000e-01
## q13           5.164e-02     2.647e-02     -3.386e-01   2.881e-01  -4.010e-03     1.428e-01
## q14           1.211e-01    -8.162e-02     -3.835e-02  -2.508e-01  -4.963e-02     7.972e-02
## q15           4.971e-03     5.740e-02     -2.581e-01   3.729e-01   7.939e-02     1.018e-01
## q16           2.450e-01    -6.448e-02      6.447e-02   1.757e-01  -2.060e-01     7.158e-03
## q17          -2.310e-01     8.405e-02     -3.947e-02   1.424e-01   3.434e-01    -8.871e-02
## q18           4.003e-02    -4.045e-02      2.264e-02  -9.453e-02   2.958e-01    -2.477e-02
## q19           5.952e-02     5.815e-02     -6.029e-01   6.573e-02   5.393e-01     2.828e-01
## q20          -8.766e-02     2.262e-01     -6.807e-01   1.403e-01   5.257e-01     3.440e-01
## q21           1.903e-01    -3.190e-02     -6.312e-01   1.331e-01   5.689e-02     4.847e-01
## q22          -1.334e-01     5.980e-02      1.251e-01   8.396e-02   7.175e-02    -4.788e-01
## q23          -5.700e-02    -1.563e-01      5.947e-01  -1.535e-01  -1.894e-01    -6.388e-02
## q24          -1.419e-01     4.202e-02      2.188e-01   2.128e-02  -4.087e-02     2.361e-01
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hopeless!  At least one of the assumptions must be wrong, but which one?  This
time, let&amp;#8217;s use our brains instead of stats, and do a&amp;nbsp;visualisation.  &lt;/p&gt;
&lt;h2 id="visualisation-brain-not-brawn"&gt;Visualisation: Brain not&amp;nbsp;brawn&lt;/h2&gt;
&lt;p&gt;Since patterns are hard to find among random responses, I answered 24 more
surveys systematically, answering &amp;#8220;Strongly disagree&amp;#8221; to one statement, and
&amp;#8220;Strongly agree&amp;#8221; to all the others, until all 24 statements had been strongly
disagreed with. One time, I answered one with &amp;#8220;Strongly agree&amp;#8221; to every
statement, plotting the resulting scores at 0 on the&amp;nbsp;x-axis.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/radar-systematic-1.svg" title="plot of chunk radar-systematic" alt="plot of chunk radar-systematic" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s break this&amp;nbsp;down.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The maximum score appears to be 7, which &amp;#8216;Technologist&amp;#8217; got most of the time.
  If you&amp;#8217;re a technologist, you should agree with&amp;nbsp;everything.&lt;/li&gt;
&lt;li&gt;Disagreement with any of the statements drastically affects the score of
  exactly one attribute, with minor effects on some/all of the&amp;nbsp;others.&lt;/li&gt;
&lt;li&gt;Sometimes disagreement affects attributes for the better (e.g. 2 improves
  &amp;#8216;Communicator&amp;#8217;).  Sometimes it&amp;#8217;s really damaging (e.g. 17&amp;#8212;20 ruins&amp;nbsp;&amp;#8216;Technologist&amp;#8217;).&lt;/li&gt;
&lt;li&gt;There are no ties between attributes.  This is a massive&amp;nbsp;clue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;#8217;s now easy from this graph to work out the perfect survey responses.  For
example, we could max-out &amp;#8216;Communicator&amp;#8217; by agreeing with statements 1, 3, and
4, but disagreeing with statement 2 &amp;#8212; which caused a peak in the previous&amp;nbsp;graph.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/radar-perfect-1.svg" title="plot of chunk radar-perfect" alt="plot of chunk radar-perfect" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;p&gt;This is much&amp;nbsp;clearer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each attribute relates to four&amp;nbsp;statements.&lt;/li&gt;
&lt;li&gt;Not only that, but related statements are grouped together (okay, that&amp;#8217;s
  guessable from just doing the&amp;nbsp;survey).&lt;/li&gt;
&lt;li&gt;Not every statement is equally weighted (the trough depths vary within&amp;nbsp;groups).&lt;/li&gt;
&lt;li&gt;Even the statement weighting system varies between questions (the range of
  trough depths varies between&amp;nbsp;groups).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="penalties"&gt;Penalties&lt;/h2&gt;
&lt;p&gt;Crucially, it&amp;#8217;s now obvious from the parallel movements between 0 and 1, 4 and
5, and 8 and 9, that attributes are penalized by their rank.  When statement 1
is strongly disagreed with, &amp;#8216;Communicator&amp;#8217; has the bottom score, and the others
are spread between 7 and five.  But when statement 1 is strongly agreed with
(position 0 on the x-axis), &amp;#8216;Communicator&amp;#8217; takes the lead with a score of 7, and
the scores of all the others are bumped down a step.  This strongly suggests
that the scores are penalised by some function of the&amp;nbsp;rank.&lt;/p&gt;
&lt;p&gt;Think of it this way: if they&amp;#8217;re all equal-first-place, then rank them
arbitrarily (zero-based rank, 0 to 5), and then penalise them by, say,
subtracting their rank from their score.  So say &amp;#8216;Communicator&amp;#8217; is arbitrarily
ranked zero-th among equals (i.e. first place), then &amp;#8216;Communicator&amp;#8217; still scores
7, But &amp;#8216;Modeller&amp;#8217;, ranked 1 (second place), loses 1 point, and &amp;#8216;Programmer&amp;#8217;,
ranked 2 (third place) loses 2 points.  This penalisation process guarantees
against any ties, but it also obfuscates any straightforward relationship
between survey response and pre-penalty&amp;nbsp;scores.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the penalty function in action.  I answered every statement &amp;#8216;correctly&amp;#8217;,
except for statement 1, which I answered at every level from &amp;#8220;Strongly disagree&amp;#8221;
to &amp;#8220;Strongly agree&amp;#8221;.  Note the change of axis&amp;nbsp;variables.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/radar-diff-1.svg" title="plot of chunk radar-diff" alt="plot of chunk radar-diff" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;p&gt;As my answers go from &amp;#8220;Strongly disagree&amp;#8221; up to &amp;#8220;Agree&amp;#8221; (0 to 6 on the x-axis),
the score of &amp;#8216;Communicator&amp;#8217; gradually increases, as we&amp;#8217;d expect.  But in the
final step, &amp;#8220;Strongly agree&amp;#8221;, there&amp;#8217;s a jump.  That&amp;#8217;s because &amp;#8216;Communicator&amp;#8217; is
now ranked (abitrarily) in first place, so no penalty is applied, and it gets
the full 7 points.  At the same time, the other attributes are bumped&amp;nbsp;down.&lt;/p&gt;
&lt;h2 id="hunt-the-function"&gt;Hunt the&amp;nbsp;function&lt;/h2&gt;
&lt;p&gt;We need to remove these penalties before we can investigate the
statement/response weightings, but we don&amp;#8217;t yet know what exactly the penalty
function is, besides being some function of the rank.  Using the perfect
answers, though (at 6 on the x-axis above), we can get clues to narrow down the
options.  Since we know that the original pre-penalty score of every attribute
ought to have been 7, then by subtracting their final scores from 7, we reveal
the size of the&amp;nbsp;penalty.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kp"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="kp"&gt;unlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;perfect_data&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;-24&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;       &lt;span class="c1"&gt;# absolute penalty&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;##  Communicator      Modeller    Programmer  Technologist    Visualiser Data Wrangler 
##           0.0           0.4           0.7           1.0           1.4           1.8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So penalties can be as large as 1.8.  That would be a problem for poor-ranking
pre-penalty scores below 1.8, which would be pushed below zero.  To guarantee
positive final scores, the penalty function must scale with the pre-penalty
score, i.e. the pre-penalty score must be a coefficient in the function.  That
restricts us to a couple of basic designs for each attribute&amp;#8217;s&amp;nbsp;score.&lt;/p&gt;
&lt;p&gt;Either:&lt;/p&gt;
&lt;div class="math"&gt;$$\text{final score} = \text{pre-penalty} - (\text{pre-penalty} \times \text{factor} \times \text{rank})$$&lt;/div&gt;
&lt;p&gt;
where &lt;span class="math"&gt;\(0 \leq \text{factor} &amp;lt; 1/5\)&lt;/span&gt; (for&amp;nbsp;positivity).&lt;/p&gt;
&lt;p&gt;Or:&lt;/p&gt;
&lt;div class="math"&gt;$$\text{final score} = \text{factor} \times \frac{\text{pre-penalty}}{\text{rank}}$$&lt;/div&gt;
&lt;p&gt;
where &lt;span class="math"&gt;\(0 \leq \text{factor} &amp;lt; 1\)&lt;/span&gt; (to ensure a penalty when &lt;span class="math"&gt;\(\text{rank} = 1\)&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;There is a telling difference between these functions.  The first is a straight
line, essentially &lt;span class="math"&gt;\(y = mx + c\)&lt;/span&gt;, so that, given equal pre-penalty scores, the
differences between final scores are equal.  The second is a curve, essentially
&lt;span class="math"&gt;\(y = m/x\)&lt;/span&gt;, so that, even given equal pre-penalty scores, the gap between
poorly-ranked scores is wider than between the top&amp;nbsp;scores.&lt;/p&gt;
&lt;p&gt;Since we have a handy set of equal pre-penalty scores, we can eliminate one of
the functions by seeing whether the difference in penalties between ranks is, in
fact,&amp;nbsp;constant.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kp"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="kp"&gt;unlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;perfect_data&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;-24&lt;/span&gt;&lt;span class="p"&gt;])))&lt;/span&gt; &lt;span class="c1"&gt;# difference in penalties between ranks&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;##      Modeller    Programmer  Technologist    Visualiser Data Wrangler 
##           0.4           0.3           0.3           0.4           0.4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;#8217;s constant enough for me, so I choose the first&amp;nbsp;model.&lt;/p&gt;
&lt;p&gt;We can also check that penalties do, indeed, scale with the pre-penalty scores,
by producing a set of &lt;a href="https://www.mango-solutions.com/radar/?fs=true&amp;amp;r=1.0,0.9,0.9,0.8,0.8,0.7"&gt;worst-possible
answers&lt;/a&gt;.
Pay attention: these are the scores to&amp;nbsp;beat.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## Source: local data frame [6 x 2]
## 
##       attribute score
##           &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1  Communicator   1.0
## 2      Modeller   0.9
## 3    Programmer   0.9
## 4  Technologist   0.8
## 5    Visualiser   0.8
## 6 Data Wrangler   0.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Mango Solutions Data Science Radar: worst score" src="figure/radar-worst.png" /&gt;&lt;/p&gt;
&lt;p&gt;Not only does this prove the scaling of penalties by pre-penalty score, but it
also justifies the coding of &amp;#8216;agreement&amp;#8217; between 1 and 7, rather than, say, 0
and 6, since we now have a clear minimum pre-penalty score of 1, as well as a
maximum of 7 from the set of perfect&amp;nbsp;answers.&lt;/p&gt;
&lt;p&gt;If you look carefully, this set of worst-possible scores also hints at the value
of the penalty factor.  Since the pre-penalty score is 1, and the difference
between penalties is constant by design, and the difference between &lt;em&gt;these&lt;/em&gt;
penalties alternates between 0.1 and 0.0, I &lt;em&gt;strongly&lt;/em&gt; suspect a factor of 0.5
and a rounding system that alternates between odds and&amp;nbsp;evens.&lt;/p&gt;
&lt;h2 id="modelling-success"&gt;Modelling&amp;nbsp;success&lt;/h2&gt;
&lt;p&gt;But we can nail this down with a linear model, using the two sets of data where
we already know the pre-penalty scores, i.e. the best- and worst-possible
scores, as well as the ranks, so we can estimate the penalty&amp;nbsp;factor.  &lt;/p&gt;
&lt;p&gt;A reminder of the&amp;nbsp;model:&lt;/p&gt;
&lt;div class="math"&gt;$$\text{final score} = \text{pre-penalty} - (\text{pre-penalty} \times \text{factor} \times \text{rank})$$&lt;/div&gt;
&lt;p&gt;
where &lt;span class="math"&gt;\(0 \leq \text{factor} &amp;lt; 1/5\)&lt;/span&gt; (for&amp;nbsp;positivity).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;worst&lt;span class="o"&gt;$&lt;/span&gt;rank &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;
worst&lt;span class="o"&gt;$&lt;/span&gt;prepenalty &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
best &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; 
  frame_data&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;attribute&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="kp"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;score&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;Communicator&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="m"&gt;7.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;Modeller&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;         &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="m"&gt;6.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;Programmer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="m"&gt;6.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;Technologist&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="m"&gt;6.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;Visualiser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="m"&gt;5.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="s"&gt;&amp;quot;Data Wrangler&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="m"&gt;5.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
best&lt;span class="o"&gt;$&lt;/span&gt;prepenalty &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;

lm&lt;span class="p"&gt;(&lt;/span&gt;score &lt;span class="o"&gt;~&lt;/span&gt; prepenalty &lt;span class="o"&gt;+&lt;/span&gt; prepenalty&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="kp"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; data &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;rbind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;best&lt;span class="p"&gt;,&lt;/span&gt; worst&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## 
## Call:
## lm(formula = score ~ prepenalty + prepenalty:rank, data = rbind(best, 
##     worst))
## 
## Coefficients:
##     (Intercept)       prepenalty  prepenalty:rank  
##        -0.02778          1.00349         -0.05029
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;ll do!  The coefficient on the pre-penalty score is 1, as in our
model, and the coefficient on the pre-penalty&amp;#8212;rank interaction is -0.05, a nice
round number such as a model-builder might choose (and the right&amp;nbsp;sign).&lt;/p&gt;
&lt;h2 id="weighting-game"&gt;Weighting&amp;nbsp;game&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;re on the home straight.  Now that we understand the penalty system, we can
go beneath its obfuscations and sort out the statement weights.  Here, I invert
the penalty function, and apply it to an earlier set of answers that you&amp;#8217;ll
recognise in the&amp;nbsp;graph.&lt;/p&gt;
&lt;div class="math"&gt;$$\text{pre-penalty} = \frac{\text{final score}}{1 - (\text{factor} \times \text{rank})}$$&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;##&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(.,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;starts_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;attempt&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;apply&lt;/span&gt; &lt;span class="nx"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## Error in eval(expr, envir, enclos): object &amp;#39;systematic_prepenalty&amp;#39; not found
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It does the soul good to see the pre-penalty attribute scores restored (bar&amp;nbsp;rounding).&lt;/p&gt;
&lt;p&gt;The weight of each statement equals the amount of damage that it can do to the
relevant attribute&amp;#8217;s score, divided by the total damage done by the other
relevant&amp;nbsp;statements.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## Error in eval(expr, envir, enclos): object &amp;#39;systematic_prepenalty&amp;#39; not found
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Being nice fractions, the three systems make perfect sense (allowing yet again for minor
rounding): &lt;span class="math"&gt;\((\frac{1}{5}\)&lt;/span&gt;, &lt;span class="math"&gt;\(\frac{1}{5}\)&lt;/span&gt;, &lt;span class="math"&gt;\(\frac{1}{5}\)&lt;/span&gt;, &lt;span class="math"&gt;\(\frac{2}{5})\)&lt;/span&gt;, &lt;span class="math"&gt;\((\frac{7}{30}\)&lt;/span&gt;, &lt;span class="math"&gt;\(\frac{7}{30}\)&lt;/span&gt;, &lt;span class="math"&gt;\(\frac{7}{30}\)&lt;/span&gt;, &lt;span class="math"&gt;\(\frac{9}{30})\)&lt;/span&gt;, and &lt;span class="math"&gt;\((\frac{2}{10}\)&lt;/span&gt;, &lt;span class="math"&gt;\(\frac{2}{10}\)&lt;/span&gt;, &lt;span class="math"&gt;\(\frac{3}{10}\)&lt;/span&gt;, &lt;span class="math"&gt;\(\frac{3}{10})\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;And don&amp;#8217;t forget to re-write the model to account for the&amp;nbsp;weights.&lt;/p&gt;
&lt;div class="math"&gt;$$\text{score}_{\text{attribute}} = \sum_{i = 1}^{4} \text{answer}_i \times
\text{weight}_i$$&lt;/div&gt;
&lt;p&gt; where &lt;span class="math"&gt;\(\text{weight}_i\)&lt;/span&gt; is taken from&amp;nbsp;above.&lt;/p&gt;
&lt;h2 id="implementation-and-simulation"&gt;Implementation and&amp;nbsp;simulation&lt;/h2&gt;
&lt;p&gt;At last, we can implement the whole thing in R, run it on thousands of random
answer-sets, and explore the distributions.  Well, almost &amp;#8212; it turns out that R
and JavaScript handle rounding and floating-point arithmetic differently, so I
had to use the &lt;a href="https://github.com/jeroenooms/V8"&gt;V8&lt;/a&gt; package to implement the
rounding steps in JavaScript, as the website does.  I give more details in a
&lt;a href="http://nacnudus.github.io/crossprod/r-rounding-is-weird-try-javascript"&gt;previous post&lt;/a&gt;.  At least I got to display some
&amp;#8216;Technologist&amp;#8217;&amp;nbsp;skills.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ct &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; V8&lt;span class="o"&gt;::&lt;/span&gt;v8&lt;span class="p"&gt;()&lt;/span&gt;
roundjs &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; digits&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kp"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;y&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;ct&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="kp"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Number((&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%.16f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; y&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;).toFixed(&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; digits&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;))&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The effect of the penalty can be prettily illustrated by a scatterplot of the
scores of two attributes.  Ties are separated, parting the cloud, slightly above
the line &lt;span class="math"&gt;\(y = x\)&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;##&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(.,&lt;/span&gt; &lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;attempt&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;apply&lt;/span&gt; &lt;span class="nx"&gt;non&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also de-penalise the scores to see the effect of the penalty on the
distribution.  Pre-penalty scores are distributed as you&amp;#8217;d expect, despite
slightly uneven weights.  Post-penalty scores are skewed to the right, but not
so much that you&amp;#8217;d notice in casual&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/radar-penalty-skew-1.svg" title="plot of chunk radar-penalty-skew" alt="plot of chunk radar-penalty-skew" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;p&gt;The magnitude of the penalty depends on the magnitude of the pre-penalty score
as well as its rank, introducing a tricky extra dimension to any visualisation.
Hexagonal bins work well, coloured according to frequency.  Penalties tend to be
largest for middling scores, where the rank tends to be poor enough to multiply
the penalty factor by a few times, but the magnitude of the score isn&amp;#8217;t small
enough to scale the penalty&amp;nbsp;down.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/radar-penalty-magnitude-1.svg" title="plot of chunk radar-penalty-magnitude" alt="plot of chunk radar-penalty-magnitude" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;h2 id="the-whole-point"&gt;The whole&amp;nbsp;point&lt;/h2&gt;
&lt;p&gt;It turns out that interpreting individual radars should be done more thoughtfully
than one might have expected,&amp;nbsp;because&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5.2 = 7.0 for data-wrangling unicorns with perfect&amp;nbsp;answers.&lt;/li&gt;
&lt;li&gt;Scores aren&amp;#8217;t directly comparable between people, unless they&amp;#8217;re at the
  extremes where the penalties exaggerate&amp;nbsp;less.&lt;/li&gt;
&lt;li&gt;The correct answer to the statement &amp;#8220;On average, I spend at least 25% of my
  time manipulating data into analysis-ready formats&amp;#8221;, if you want a high &amp;#8216;Data
  Wrangler&amp;#8217; score, is &lt;em&gt;Strongly disagree&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the &lt;a href="https://www.mango-solutions.com/radar/?fs=true&amp;amp;r=7.0,6.6,6.3,6.0,5.6,5.2"&gt;perfect score&lt;/a&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;## Source: local data frame [6 x 2]
## 
##       attribute score
##           &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;
## 1  Communicator   7.0
## 2      Modeller   6.6
## 3    Programmer   6.3
## 4  Technologist   6.0
## 5    Visualiser   5.6
## 6 Data Wrangler   5.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Mango Solutions Data Science Radar: perfect score" src="figure/radar-perfect.png" /&gt;&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Duncan Garmonsway</dc:creator><pubDate>Tue, 28 Jun 2016 00:00:00 +1200</pubDate><guid>tag:nacnudus.github.io,2016-06-28:crossprod/hacking-the-data-science-radar-with-data-science</guid><category>R</category><category>JavaScript</category><category>V8</category></item><item><title>R rounding is weird? TryÂ JavaScript!</title><link>http://nacnudus.github.io/crossprod/r-rounding-is-weird-try-javascript</link><description>&lt;h2 id="round05-0-eh"&gt;round(0.5) == 0?&amp;nbsp;Eh?&lt;/h2&gt;
&lt;p&gt;A common source of confusion in R is rounding-to-even (example adapted from&amp;nbsp;?round):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;x1 &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; by &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kt"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x1&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x1&lt;span class="p"&gt;)),&lt;/span&gt; nrow &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; byrow &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#-- IEEE rounding !&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;##      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
## [1,]   -2 -1.5   -1 -0.5    0  0.5    1  1.5    2   2.5     3   3.5     4
## [2,]   -2 -2.0   -1  0.0    0  0.0    1  2.0    2   2.0     3   4.0     4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This post does five&amp;nbsp;things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Illustrates rounding bias with a&amp;nbsp;graph.&lt;/li&gt;
&lt;li&gt;Discovers that JavaScript (in my browser) rounds the other&amp;nbsp;way.&lt;/li&gt;
&lt;li&gt;Encounters floating-point difficulties when emulating&amp;nbsp;JavaScript.&lt;/li&gt;
&lt;li&gt;Calls JavaScript itself via the &lt;code&gt;V8&lt;/code&gt; package.&lt;/li&gt;
&lt;li&gt;Explains where all the time&amp;nbsp;goes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="graph-of-rounding-bias"&gt;Graph of rounding&amp;nbsp;bias&lt;/h2&gt;
&lt;p&gt;Here is an unpolished graphical illustration of the bias introduced by rounding
halves (0.5, 1.5, etc.) away from zero.  The details of the difference are
neatly explained in the &lt;a href="http://www.burns-stat.com/pages/Tutor/R_inferno.pdf"&gt;R
Inferno&lt;/a&gt;, circle&amp;nbsp;8.1.52.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Round-to-even is the R default&lt;/span&gt;
round_to_even &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;round&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Round-away-from-zero function adapted from http://stackoverflow.com/a/12688836/937932&lt;/span&gt;
round_away_from_zero &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; digits &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  posneg &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt;
  z &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;digits
  z &lt;span class="o"&gt;=&lt;/span&gt; z &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;
  z &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;z&lt;span class="p"&gt;)&lt;/span&gt;
  z &lt;span class="o"&gt;=&lt;/span&gt; z &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;digits&lt;span class="p"&gt;)&lt;/span&gt;
  z&lt;span class="o"&gt;*&lt;/span&gt;posneg
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/rounding-bias-1-1.svg" title="plot of chunk rounding-bias-1" alt="plot of chunk rounding-bias-1" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;h2 id="javascript-rounding-in-the-chrome-browser"&gt;JavaScript rounding in the Chrome&amp;nbsp;browser&lt;/h2&gt;
&lt;p&gt;But when I tried to emulated a website&amp;#8217;s behaviour in R, it turned out that
Chrome was rounding towards odd numbers after the decimal point (anyone know
why?).  Try the following in the Chrome Developer Console (ctrl+shift+c in a&amp;nbsp;tab).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Rounds away from zero&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Rounds to odd&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How odd is that?  So I adapted a &lt;a href="https://www.mathworks.com/matlabcentral/fileexchange/40286-rounding-functions-collection"&gt;handy &lt;span class="caps"&gt;MATLAB&lt;/span&gt;
implementation&lt;/a&gt;
of rounding-to-odd, and compared it with the other two&amp;nbsp;strategies.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Round-to-odd function adapted from&lt;/span&gt;
&lt;span class="c1"&gt;# https://www.mathworks.com/matlabcentral/fileexchange/40286-rounding-functions-collection&lt;/span&gt;
round_to_odd &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; digits &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  y &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;digits
  z &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; y &lt;span class="o"&gt;%%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="kp"&gt;sign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;y&lt;span class="p"&gt;))&lt;/span&gt;
  z&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;is.nan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;z&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  z&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;z&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
  z &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; round_away_from_zero&lt;span class="p"&gt;(&lt;/span&gt;y &lt;span class="o"&gt;-&lt;/span&gt; z&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  z &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;digits&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="http://nacnudus.github.io/crossprod/figure/rounding-bias-2-1.svg" title="plot of chunk rounding-bias-2" alt="plot of chunk rounding-bias-2" width="960px" height="540px" /&gt;&lt;/p&gt;
&lt;p&gt;The graph shows that, like rounding-to-even, rounding-to-odd is unbiased, but a
snag is that successive rounded operations will never reach zero (see comments
on &lt;a href="http://programmers.stackexchange.com/a/256269/111311"&gt;this StackExchange
answer&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;77&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  x &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt; round_to_odd&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kp"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## 39 , 19 , 9 , 5 , 3 , 1 , 1 , 1 , 1 , 1 ,
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;77&lt;/span&gt;
&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;i &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  x &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt; round_to_even&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kp"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## 38 , 19 , 10 , 5 , 2 , 1 , 0 , 0 , 0 , 0 ,
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="floating-point-errors"&gt;Floating point&amp;nbsp;errors&lt;/h2&gt;
&lt;p&gt;Using my new round-to-odd function to emulate JavaScript behaviour, I
encountered floating point errors.  For example, take the number&amp;nbsp;6.65:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kp"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%.16f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6.65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] &amp;quot;6.6500000000000004&amp;quot; &amp;quot;6.6499999999999995&amp;quot; &amp;quot;6.6500000000000004&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The tiny differences don&amp;#8217;t affect rounding in&amp;nbsp;R:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;round_to_odd&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6.65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] 6.7 6.7 6.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But they do affect rounding in JavaScript.  Again, paste these into the browser&amp;nbsp;console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;console.log((6.65).toFixed(1));
console.log((7 * 0.95).toFixed(1));
console.log((7 - 0.35).toFixed(1));
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="calling-javascript-v8-engine-via-the-v8-package"&gt;Calling JavaScript V8 engine via the V8&amp;nbsp;package&lt;/h2&gt;
&lt;p&gt;At this point, I gave up on emulating JavaScript behaviour in R, and resorted to
calling JavaScript from R via the
&lt;a href="https://cran.r-project.org/web/packages/V8/index.html"&gt;&lt;code&gt;V8&lt;/code&gt;&lt;/a&gt; package, which uses
the V8 JavaScript engine, the same that my browser (Chrome)&amp;nbsp;uses.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;V8&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# library(V8)&lt;/span&gt;
ct &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; V8&lt;span class="o"&gt;::&lt;/span&gt;v8&lt;span class="p"&gt;()&lt;/span&gt;
roundjs &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; digits&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kp"&gt;sapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;y&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;ct&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="kp"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;paste0&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Number((&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%.16f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; y&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;).toFixed(&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; digits&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;))&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
roundjs&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6.65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] 6.7 6.6 6.7
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="what-took-me-so-long"&gt;What took me so&amp;nbsp;long&lt;/h2&gt;
&lt;p&gt;This was a particularly tricky part of a bigger project (see next week&amp;#8217;s&amp;nbsp;post).  &lt;/p&gt;
&lt;p&gt;Most of the time went on finding, testing and correcting the two rounding
functions for round-to-odd and round-away-from-zero.  I adapted the round-to-odd
function from some &lt;a href="https://www.mathworks.com/matlabcentral/fileexchange/40286-rounding-functions-collection"&gt;handy &lt;span class="caps"&gt;MATLAB&lt;/span&gt;
implementations&lt;/a&gt;
of various rounding strategies.  Unfortunately, they depended on &lt;span class="caps"&gt;MATLAB&lt;/span&gt;&amp;#8217;s
built-in &lt;code&gt;round&lt;/code&gt; function, which, according to its
&lt;a href="https://uk.mathworks.com/help/matlab/ref/round.html"&gt;documentation&lt;/a&gt;, rounds
away from zero, so I had to find a round-away-from-zero function in R first.
Even then, it didn&amp;#8217;t work for negatives when I ported it to R, probably due to
fundamental language&amp;nbsp;differences:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Surprising behaviour of &lt;/span&gt;
&lt;span class="m"&gt;-1.5&lt;/span&gt; &lt;span class="o"&gt;%%&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] 0.5
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Predictable behaviour (but different to MATLAB?)&lt;/span&gt;
&lt;span class="m"&gt;-1.0&lt;/span&gt; &lt;span class="o"&gt;%%&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] NaN
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also spent quite a while on the graphs of bias, where I befuddled myself by
drawing random numbers between 0 to 1 (which is unfair on unbiased functions,
because only 0.5 is represented, not 1.5), and by not doing preliminary rounding
on the random draws (which meant that 0.5, 1.5, etc., weren&amp;#8217;t represented at&amp;nbsp;all).&lt;/p&gt;
&lt;p&gt;Finally, my initial &lt;code&gt;V8&lt;/code&gt; function used the &lt;code&gt;V8&lt;/code&gt; package&amp;#8217;s own magic for passing
values to the V8 engine, but when it didn&amp;#8217;t work, I suspected that the values
were being passed as a string, and that R was rounding them as part of the
conversion.  For&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;V8&lt;span class="p"&gt;)&lt;/span&gt;
roundjs &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;,&lt;/span&gt; digits&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  ct &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; V8&lt;span class="o"&gt;::&lt;/span&gt;v8&lt;span class="p"&gt;()&lt;/span&gt;
  ct&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="kn"&gt;source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;system.file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/underscore.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; package&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;V8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Essential for _&lt;/span&gt;
  ct&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="kp"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;digits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; digits&lt;span class="p"&gt;)&lt;/span&gt;
  xrounded &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; 
    ct&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="kp"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_.forEach&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            x&lt;span class="p"&gt;,&lt;/span&gt;
            V8&lt;span class="o"&gt;::&lt;/span&gt;JS&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;function(item, index, arr) {arr[index] = Number(item.toFixed(digits));}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  xrounded
&lt;span class="p"&gt;}&lt;/span&gt;
roundjs&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6.65&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;0.35&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;## [1] 6.7 6.7 6.7
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="code-for-the-graphs"&gt;Code for the&amp;nbsp;graphs&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Compare the two systems&lt;/span&gt;
&lt;span class="c1"&gt;# x1 &amp;lt;- seq(-2.5, 2.5)&lt;/span&gt;
&lt;span class="c1"&gt;# matrix(c(x1,&lt;/span&gt;
&lt;span class="c1"&gt;#          round_to_even(x1),&lt;/span&gt;
&lt;span class="c1"&gt;#          round_to_odd(x1)),&lt;/span&gt;
&lt;span class="c1"&gt;#        nrow = 3, byrow = TRUE)&lt;/span&gt;

&lt;span class="c1"&gt;# Graph the bias of many random draws&lt;/span&gt;
N &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;10000&lt;/span&gt;
bias&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;FUN&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;# Round to one decimal place to ensure 0.5 ever appears.&lt;/span&gt;
  &lt;span class="c1"&gt;# Draw between 0 and 2 to fairly represent both 0.5 and 1.5.&lt;/span&gt;
  x &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;runif&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; min &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; max &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="kp"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;FUN&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; x&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

bias_to_even &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;replicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;N&lt;span class="p"&gt;,&lt;/span&gt; bias&lt;span class="p"&gt;(&lt;/span&gt;round_to_even&lt;span class="p"&gt;))&lt;/span&gt;
bias_away_from_zero &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;replicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;N&lt;span class="p"&gt;,&lt;/span&gt; bias&lt;span class="p"&gt;(&lt;/span&gt;round_away_from_zero&lt;span class="p"&gt;))&lt;/span&gt;

limits &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
par&lt;span class="p"&gt;(&lt;/span&gt;mfrow &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  hist&lt;span class="p"&gt;(&lt;/span&gt;bias_to_even&lt;span class="p"&gt;,&lt;/span&gt; xlim &lt;span class="o"&gt;=&lt;/span&gt; limits&lt;span class="p"&gt;,&lt;/span&gt; col &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lightgreen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  hist&lt;span class="p"&gt;(&lt;/span&gt;bias_away_from_zero&lt;span class="p"&gt;,&lt;/span&gt; xlim &lt;span class="o"&gt;=&lt;/span&gt; limits&lt;span class="p"&gt;,&lt;/span&gt; col &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lightblue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Compare the three systems&lt;/span&gt;
&lt;span class="c1"&gt;# x1 &amp;lt;- seq(-2.5, 2.5)&lt;/span&gt;
&lt;span class="c1"&gt;# matrix(c(x1,&lt;/span&gt;
&lt;span class="c1"&gt;#          round_to_even(x1),&lt;/span&gt;
&lt;span class="c1"&gt;#          round_away_from_zero(x1),&lt;/span&gt;
&lt;span class="c1"&gt;#          round_to_odd(x1)), nrow = 4, byrow = TRUE)&lt;/span&gt;

bias_to_odd &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;replicate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;N&lt;span class="p"&gt;,&lt;/span&gt; bias&lt;span class="p"&gt;(&lt;/span&gt;round_to_odd&lt;span class="p"&gt;))&lt;/span&gt;

limits &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
par&lt;span class="p"&gt;(&lt;/span&gt;mfrow &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  hist&lt;span class="p"&gt;(&lt;/span&gt;bias_to_even&lt;span class="p"&gt;,&lt;/span&gt; xlim &lt;span class="o"&gt;=&lt;/span&gt; limits&lt;span class="p"&gt;,&lt;/span&gt; col &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lightgreen&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  hist&lt;span class="p"&gt;(&lt;/span&gt;bias_away_from_zero&lt;span class="p"&gt;,&lt;/span&gt; xlim &lt;span class="o"&gt;=&lt;/span&gt; limits&lt;span class="p"&gt;,&lt;/span&gt; col &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lightblue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  hist&lt;span class="p"&gt;(&lt;/span&gt;bias_to_odd&lt;span class="p"&gt;,&lt;/span&gt; xlim &lt;span class="o"&gt;=&lt;/span&gt; limits&lt;span class="p"&gt;,&lt;/span&gt; col &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pink&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Duncan Garmonsway</dc:creator><pubDate>Mon, 25 Apr 2016 00:00:00 +1200</pubDate><guid>tag:nacnudus.github.io,2016-04-25:crossprod/r-rounding-is-weird-try-javascript</guid><category>R</category><category>JavaScript</category><category>V8</category></item></channel></rss>